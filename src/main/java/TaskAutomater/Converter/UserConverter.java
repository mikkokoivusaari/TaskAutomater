/**
 * 
 */
// 24 Apr 2018
package TaskAutomater.Converter;

/**
 * @author mikko
 *
 */
import org.bson.types.ObjectId;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.UUID;

import org.bson.Document;
import TaskAutomater.Model.UserModel;

import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.DBObject;
public class UserConverter {
	//TODO clear code and make it more readable
	//Convert User Object to mongo 
	public static Document toUserModel(UserModel user) {
		Date entry = new Date();
		ZoneId zoned;
		//we will use autogenerated id:s
		ObjectId id;
		UUID guid;
		//TODO add check whether the current useer exists already. Maybe verify on client side.
		 ZonedDateTime now = ZonedDateTime.now();
		Date dat = new Date();
		
		//System.out.println(dat);
		//Dont change entrytime if it exists
		if(user.getEntryTime() == null) {
			dat.getTime();
			entry.getTime();
			//TODO make functions touser being able to change. For now we can go with default fin
			//zoned = ZoneId.of("Europe/Helsinki");
		}else {
			entry = user.getEntryTime();
			//zoned = ZoneId.of(user.getZoneID());
		}
		if (user.getId() == null) {
			//TODO we then want mongo to generate id
			id = null;
		}
		else {
			id = user.getId();
		}
		if (user.getGuid() == null) {
			guid = user.getGuid();
		}else {
			guid = new UUID(0, 8);
		}
		Document doc = new Document(
				
				"DocumentType", "User")
				.append("DateUpdated", dat.getTime())
					.append("EntryTime", dat
					
					)
					.append("idguid", guid)
					;//.append("ZoneID", zoned.toString());
		if (id !=null ) {
			doc.append("_id", id);
		}
		//doc.append("uname", user.getUname());
		//adding data document to fill in the userdata
		//Document data = new Document();
		doc.append("Data", new BasicDBObject(
				"UName", user.getUname())
				.append("First", user.getFname())
			.append("LastName", user.getLname())
			.append("Email", user.getEmail())
			
		);
		
		Integer[] role = user.getRoles();
		//helper document to complete json.
		Document doc2 = new Document();
		
		//Looping through given roles and inserting them into doc2
		for (int i=0; i<role.length;i++) {
			//System.out.println(i);
		    doc2.append("Role" + i , role[i]);
		
		}
				//using 2 docs to complete the correct layout for roles
				doc.append("Roles", new BasicDBObject(
						"UserRoles", "here")
						
						).append("Roles", doc2);
						
		return doc;
		
	} 
	
	//convert mongo User object to User in this application

	public static UserModel toUserModel(Document doc) {
		UserModel user = new UserModel();	
		ZoneId zoneID = ZoneId.of("Europe/Helsinki");
		//TODO fix this part to search data from DATA block
		Document data = (Document) doc.get("Data");
		user.setUname(data.get("UName").toString());

		user.setFname(data.get("First").toString());

		user.setLname(data.get("LastName").toString());
		user.setEmail(data.get("Email").toString());
		user.setGuid((UUID) doc.get("idguid"));
		user.setId(doc.getObjectId("_id")); //cant be null since object is coming from mongo
		//Converting entrytime to variable we can use.
		Document roles = (Document) doc.get("Roles");
		Integer[] role = new Integer[roles.size()] ;
		System.out.println(roles.size());
		for (int i=0; i <roles.size() ; i++) {
			//System.out.println(i);
			String searchitem = "Role"+i;
			//System.out.println(roles.get(searchitem));
			role[i] =  (Integer) roles.get(searchitem);
		}
		Date date = (Date) doc.get("EntryTime");
		//TODO add ability to fetch zoneID from document else use default
		//Instant instant = date.toInstant();
		//ZonedDateTime entry = instant.atZone(zoneID);
		//Maybe add timezone to dates or add info about users timezone
		//ZonedDateTime entry = (ZonedDateTime) doc.get("EntryTime");
		user.setEntryTime(date);
		return user;
	}
}

